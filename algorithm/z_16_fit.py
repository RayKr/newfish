# 第16章 n个货物装入若干容量为C的集装箱中，n个货物的体积分别是{s1,s2,s3...sn}
# 最先适宜策略 每次将一个货物装入第一个能容纳它的集装箱中
# 最优适宜策略 每次将一个货物装入能容纳它并且目前剩余容量最小的集装箱中


def first_fit(n, C, s):  # n货物数，C容量，s体积列表
    # 初始化
    b = [0 for i in range(n)]   # b[i]表示第i+1个集装箱已装下货物的体积
    k = 0
    for i in range(n):  # 遍历n个货物
        # 初始化箱子编号，从头开始往后找
        j = 0
        # 核心：依次判断当前箱子能否装下这个货物，能装下就放，不再看后边的，装不下则找下一个箱子
        while C - b[j] < s[i]:
            j += 1
        # 把这个货物放入该箱子中，即体积追加
        b[j] += s[i]
        # 所需的集装箱数
        k = max(k, j+1)
    return k


def best_fit(n, C, s):  # 最优适宜策略
    b = [0 for i in range(n)]
    k = 0
    for i in range(n):
        min = C
        # 先预设一个新箱子用来放当前货物，如果后边的算法没找到当前已有货物的箱子能放下，则就直接用这个新箱子
        m = k + 1
        # 核心：找已用过的箱子中能放下，并且当前剩余容量最小的箱子编号
        for j in range(k+1):
            temp = C - b[j] - s[i]
            if temp >= 0 and temp < min:
                min = temp
                m = j
        # 当遍历过一遍已用的箱子后，就能确定出要放的箱子编号了，即为 m，则放入该货物
        b[m] += s[i]
        # 所需的集装箱数
        k = max(k, m+1)
    return k


print(first_fit(10, 10, [4, 2, 7, 3, 5, 4, 2, 3, 6, 2]))
print(best_fit(10, 10, [4, 2, 7, 3, 5, 4, 2, 3, 6, 2]))
